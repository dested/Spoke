macro ;&**&;=>|(str,num)
	a=0
	strb=""
	(a<=num)=>
		strb=strb+str
		a=a+1
	return strb

macro ;not &;=>|(sts)
	if sts
		return false
	else
		return true

macro ;&?&:&;=>|(con,l1,l2)
	if con
		return l1
	else
		return l2

macro ;&^&;=>|(con,l1)
	[0>>l1]=>|(g)
		yield (con)
		
macro ;&++;=>|(ref index)
	cf=index
	index=index+1
	return cf

macro ;&+=&;=>|(ref ba,gi)
	fjf=ba
	ba=ba+gi
	return fjf

macro ;&--;=>|(ref index)
	f=index
	index=index-1
	return f
  
macro ;&-=&;=>|(ref index,v)
	index=index-v
	return index

macro ;REVERSE &;=>|(rrb)
	rrb[(rrb.length()-1)<<0]=>|(gg)
		yield gg

macro ;clone &;=>|(rrb)
	rrb=>|(a89)
		yield (a89)

macro ;& mod &;=>|(index,v)
	grb=index
	(grb>=v)=>
		grb=grb-v
	return grb
	
macro ;&>>&;=>|(a333,v333)
	(a333<v333)=>
		yield a333
		a333=a333+1

macro ;&<<&;=>|(a333,v333)
	(a333>=v333)=>
		yield a333
		a333=a333-1

macro ;&>>>&>>>&;=>|(a333,v333,ge)
	(a333<v333)=>
		yield a333
		a333=a333+ge

class Main

	Lines=[]
	runningLineIndex=0
	theConsole=create Console()	

	LetterRepo=create Letters()
	def ()  
	
		addLetterToLine(REVERSE LetterRepo.Blank)
		addLetterToLine(REVERSE LetterRepo.D)
		addLetterToLine(REVERSE LetterRepo.A)
		addLetterToLine(REVERSE LetterRepo.L)
		addLetterToLine(REVERSE LetterRepo.A)
		addLetterToLine(REVERSE LetterRepo.S) 
		addLetterToLine(REVERSE LetterRepo.X)

		(true)=>
			theConsole.progressDown()
			if drawNextLine()==false
				return
			theConsole.draw()
			
			wait(50)


	def addLetterToLine(lt)
		lt=>|(l)
			Lines.add(l)
		Lines.add(1^5) 
		Lines.add(1^5) 
		Lines.add(1^5) 
			
	def drawNextLine()
		if runningLineIndex>100
			return false

		
		d=Lines[runningLineIndex mod Lines.length()]
		theConsole.pushNewLineToTop(d)
		
		runningLineIndex++
		return true


class Console
	Screen=[]
	def ()
		[0>>50]=>|(h) 
			Screen.add([0>>20]=>|(w)
				yield 0
			)
			LastScreen.add([0>>20]=>|(w)
				yield 0
			)
		clearConsole()

	def pushNewLineToTop(lin)
		lin=>|(v,ind)
			(0>>>Screen[0].length()-lin.length()>>>lin.length()) => |(g)
				(Screen[0])[ind+g]=v
		


	def draw()
$		clearConsole()
$		writeLine()

		in1=0
		Screen=>|(h)
			in2=0
			h=>|(w)
				if ((LastScreen[in1])[in2]==w)
				
				else
					setConsolePosition(in2,in1)
					if w==0
						write(" ")
					if w==1
						write(" ")
					if w==2
						write("|")
				in2++
			in1++

$					write(w)

$		LastScreen= Screen

	LastScreen=[]

	def progressDown()
		clearConsole()
		star=(Screen.length()-1)
		Screen[(Screen.length()-2)<<0]=>|(h)
$			write(star,"-")

$			debug(Screen[star])
			Screen[star]=clone h
			star-=1
				



class Letters
	A=[]
	D=[]
	L=[]
	S=[]
	X=[]
	Blank=[]

	def ()
		A.add([1,1,2,1,1])
		A.add([1,2,1,2,1])
		A.add([2,2,2,2,2])
		A.add([2,1,1,1,2])
		A.add([2,1,1,1,2]) 

		D.add([2,2,2,2,1])
		D.add([2,1,1,1,2])
		D.add([2,1,1,1,2])
		D.add([2,1,1,1,2])
		D.add([2,2,2,2,1])

		
		L.add([2,1,1,1,1])
		L.add([2,1,1,1,1])
		L.add([2,1,1,1,1])
		L.add([2,1,1,1,1])
		L.add([2,2,2,2,1])

		S.add([1,2,2,2,2])
		S.add([2,1,1,1,1])
		S.add([1,2,2,2,1])
		S.add([1,1,1,1,2])
		S.add([2,2,2,2,1])

		X.add([2,1,1,1,2])
		X.add([1,2,1,2,1])
		X.add([1,1,2,1,1])
		X.add([1,2,1,2,1])
		X.add([2,1,1,1,2])


		Blank.add([1,1,1,1,1])
		Blank.add([1,1,1,1,1])
