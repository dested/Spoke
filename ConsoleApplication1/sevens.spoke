
macro ;clone &;=>|(rrb)
	rrb=>|(a89)
		yield (a89)
		
macro ;&<&>;=>|(items,expressionc)
	items=>|(_abb)
		if expressionc(_abb)
			return _abb
	return null

macro ;[&>>&];=>|(a333,v333)
	(a333<=v333)=>
		yield a333
		a333=a333+1

macro ;&{&};=>|(items1,expression)
	items1=>|(_ff)
		if expression(_ff)
			yield return _ff


macro ;&++;=>|(ref index)
	f=index
	index=index+1
	return f-1

macro ;&+=&;=>|(ref ba,gi)
	fjf=ba
	ba=ba+gi
	return fjf

macro ;&--;=>|(ref index)
	f=index
	index=index-1
	return f+1
  

	
macro ;&-=&;=>|(ref index,v)
	index=index-v
	return index


macro ;&**&;=>|(str,num)
	a=0
	strb=""
	(a<=num)=>
		strb=strb+str
		a=a+1
	return strb


macro ;&?&:&;=>|(con,l1,l2)
	if con
		return l1
	else
		return l2
 


class Main 

	spades=[{Value=0,Type=0}]
	clubs=[{Value=0,Type=0}]
	hearts=[{Value=0,Type=0}]
	diamonds=[{Value=0,Type=0}]
	dbc={}	
	
	CardTypes=[]
	CardNames=[]
	

	def ()

		spades.clear()
		clubs.clear()
		hearts.clear()
		diamonds.clear()

		

		writeLine(false?1:2,"2")
		writeLine(true?1:2,"1")
		

		dbc=|(left,right)=>
			return left.Value>right.Value

		u=runGame()

		writeLine(u.Name,"Is the winner!")


	def shuffle(arbs)
	
		indes=0
		vafb=clone arbs 

		arbs=>|(fs)
			vm=nextRandom(0,vafb.length())
			d=vafb[indes]
			vafb[indes]=vafb[vm]
			indes++
			vafb[vm]=d 

		write("|")
		write(vafb)
		write("|")

		return vafb

	def runGame()
		users=[{Name="A",Cards=[]},{Name="B",Cards=[]},{Name="C",Cards=[]},{Name="D",Cards=[]},{Name="E",Cards=[]}]
		 

$		debug(users[0])
		deck=[]

		[1>>4]=>|(am)
			[1>>13]=>|(ab)
				deck.add({Value=ab,Type=am})

$		debug(deck)
		

		[1>>20]=>
			write(deck)
			write(" Shuff")
			deck=shuffle(deck)
			write(deck)
			


		(deck.length()>0)=>
			users=>|(u)
				if deck.length()>0
					u.Cards.add(deck[0])
					deck.remove(deck[0])
		 
$		users=>|(u)
$			writeLine("User:",u.Name)
$			u.Cards=>|(c)
$				writeLine("  ",c.Type,c.Value)

		
		CardTypes=["","Hearts","Clubs","Diamonds","Spades"]
		CardNames=["","Ace","Deuce","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King"]


		(1<2)=>
			users=>|(u) 
				clearConsole()
				drawHand(u)
				 
$				usable=[u.Cards{_.Type==4 && (_.Value==7 || spades<__.Value==_.Value+1 || __.Value=_.Value-1>!=Null},u.Cards{_.Type==2 && (_.Value==7 || clubs<__.Value==_.Value+1 || __.Value=_.Value-1>!=Null},u.Cards{_.Type==1 && (_.Value==7 || hearts<__.Value==_.Value+1 || __.Value=_.Value-1>!=Null},u.Cards{_.Type==4 && (_.Value==3 || diamonds<__.Value==_.Value+1 || __.Value=_.Value-1>!=Null}]


				usable=[u.Cards{|(_)=>
					return _.Type==4 && (_.Value==7 || spades<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==2 && (_.Value==7 || clubs<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==1 && (_.Value==7 || hearts<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==3 && (_.Value==7 || diamonds<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				}]
				 
$ old

$				usable=[u.Cards=>|(_)
$					if _.Type==4 && (_.Value==7 || spades=>|(__)
$						if __.Value==_.Value+1 || __.Value==_.Value-1
$							return __
$					!=NULL)
$						yield return _
$				,u.Cards=>|(_)
$					if _.Type==2 && (_.Value==7 || clubs=>|(__)
$						if __.Value==_.Value+1 || __.Value==_.Value-1
$							return __
$					!=NULL)
$						yield return _
$				,u.Cards=>|(_)
$					if _.Type==1 && (_.Value==7 || hearts=>|(__)
$						if __.Value==_.Value+1 || __.Value==_.Value-1
$							return __
$					!=NULL)
$						yield return _
$				,u.Cards=>|(_)
$					if _.Type==3 && (_.Value==7 || diamonds=>|(__)
$						if __.Value==_.Value+1 || __.Value==_.Value-1
$							return __
$					!=NULL)
$						yield return _
$				]
$



				i=0
				draw()
				setConsolePosition(0,3)
				writeLine("Which card would you like to play?")
				writeLine("   ",0,":","Skip")
				i=1




				

				sortArray(usable,dbc)=>|(card)
					writeLine("   ",i,":",CardNames[card.Value],"Of",CardTypes[card.Type])
					i++
				
				rfe=""
$ 				rfe=readLine()

				de=0
				if rfe==""
					de=usable.length()
				else
					de=stringToInt(rfe)



$				if usable[de-1].Type==4
$					debug(spades)
$				if usable[de-1].Type==2
$					debug(clubs)
$				if usable[de-1].Type==1
$					debug(hearts)
$				if usable[de-1].Type==3
$					debug(diamonds)


				if de>0
					rm=usable[de-1]
$					debug(rm)
$					debug(u.Cards)
					if rm.Type==4
$						debug(spades)
						u.Cards.remove(rm)
						spades.add(rm)
					if rm.Type==2
$						debug(clubs)
						u.Cards.remove(rm)
						clubs.add(rm)
					if rm.Type==1
$						debug(hearts)
						u.Cards.remove(rm)
						hearts.add(rm)
					if rm.Type==3
$						debug(diamonds)
						u.Cards.remove(rm)
						diamonds.add(rm)
				if u.Cards.length()==0
					return u
				



	def draw() 
		ig=1

		drawPack("Spades",sortArray(spades,dbc),ig+=10)
		drawPack("Diamonds",sortArray(diamonds,dbc),ig+=10)
		drawPack("Hearts",sortArray(hearts,dbc),ig+=10)
		drawPack("Clubs",sortArray(clubs,dbc),ig+=10)
		

	def drawHand(user)

		ab=4
		setConsolePosition(45,ab)	
		ab++
		write(user.Name,"Cards")	
		setConsolePosition(45,ab)	
		ab++

		write("-"**stringLength(user.Name+" Cards"))
		
		c=sortArray(user.Cards,dbc)
		c=>|(_)
			setConsolePosition(45,ab)
			debug(ab)
			ab++
			write(CardNames[_.Value],"Of",CardTypes[_.Type])	
			
	def drawPack(name,pack,pos)
		i=15
		setConsolePosition(pos,i)
		i++
		write(name)
		setConsolePosition(pos,i)
		i++
		write("-"**stringLength(name))
		if pack.length()==13
			setConsolePosition(pos,i)
			i++
			write("Done")
			[i>>i+13]=>|(avgf)
				setConsolePosition(pos,avgf)
				write(" "**10)
				
			return null

		pack=>|(_)
			setConsolePosition(pos,i)
			i++
			write(CardNames[_.Value])


	def sortArray(vr,fbc)
		ar=vr
$		debug(vr)
		i=ar.length()-1
		(i>=0)=>
			j=1
			(j<=i)=>
				if(fbc(ar[j-1],ar[j]))
					temp=ar[j-1]
					ar[j-1]=ar[j]
					ar[j]=temp
				j++
			i-- 
		
$		debug(ar)
		
		return ar

		